name: Build and Push Multi-arch Docker Images

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: '版本类型 (major/minor/patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  IMAGE_NAME: one-api
  GHCR_REGISTRY: ghcr.io
  ALIYUN_REGISTRY: ${{ secrets.ALIYUN_REGISTRY }}
  ALIYUN_NAMESPACE: ${{ secrets.ALIYUN_NAMESPACE }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get and increment version
        id: get_version
        uses: actions/github-script@v7
        with:
          script: |
            // 获取所有标签
            const { data: tags } = await github.rest.repos.listTags({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            
            // 找到最新的语义化版本标签
            const versionRegex = /^v?(\d+)\.(\d+)\.(\d+)$/;
            let latestVersion = { major: 0, minor: 0, patch: 0 };
            
            tags.forEach(tag => {
              const match = tag.name.match(versionRegex);
              if (match) {
                const major = parseInt(match[1]);
                const minor = parseInt(match[2]);
                const patch = parseInt(match[3]);
                
                if (major > latestVersion.major || 
                    (major === latestVersion.major && minor > latestVersion.minor) ||
                    (major === latestVersion.major && minor === latestVersion.minor && patch > latestVersion.patch)) {
                  latestVersion = { major, minor, patch };
                }
              }
            });
            
            // 根据输入类型递增版本
            const versionType = '${{ github.event.inputs.version_type }}';
            let newMajor = latestVersion.major;
            let newMinor = latestVersion.minor;
            let newPatch = latestVersion.patch;
            
            switch (versionType) {
              case 'major':
                newMajor += 1;
                newMinor = 0;
                newPatch = 0;
                break;
              case 'minor':
                newMinor += 1;
                newPatch = 0;
                break;
              case 'patch':
                newPatch += 1;
                break;
            }
            
            const newVersion = `v${newMajor}.${newMinor}.${newPatch}`;
            console.log(`New version: ${newVersion}`);
            
            // 设置输出
            core.setOutput('new_version', newVersion);
            return newVersion;

  build-and-push:
    needs: get_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_USERNAME }}
          password: ${{ secrets.ALIYUN_PASSWORD }}

      - name: Build and push multi-arch images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.get_version.outputs.new_version }}
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ needs.get_version.outputs.new_version }}
            ${{ env.ALIYUN_REGISTRY }}/${{ env.ALIYUN_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create_tag:
    needs: [get_version, build-and-push]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create Git tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const newVersion = '${{ needs.get_version.outputs.new_version }}';
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${newVersion}`,
              sha: context.sha
            });
            console.log(`Created tag: ${newVersion}`);
